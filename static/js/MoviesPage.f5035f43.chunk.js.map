{"version":3,"sources":["components/NotFound404/NotFound.js","components/MoviesPage/MoviesPage.js","components/services/api.js","components/MoviePendingView/MoviePendingView.js","components/MoviesPage/MoviesPage.module.css"],"names":["NotFound","role","style","textAlign","Status","MoviesPage","useState","movies","setMovies","query","setQuery","request","setRequest","error","setError","status","setStatus","url","useRouteMatch","location","useLocation","useEffect","moviesAPI","fetchMovies","then","catch","err","MoviePendingView","message","className","s","form","onSubmit","ev","preventDefault","trim","toast","input","value","onChange","currentTarget","toLowerCase","type","autoComplete","autoFocus","placeholder","button","moviesList","map","title","id","moviesLink","to","pathname","state","from","moviesItem","axios","defaults","baseURL","params","api_key","language","api","fetchTrendingMovieForHomepage","a","config","data","results","Error","fetchMovieDetails","movie_id","fetchMovieCast","cast","fetchReviewsMovie","color","height","width","Component","module","exports"],"mappings":"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","file":"static/js/MoviesPage.f5035f43.chunk.js","sourcesContent":["export default function NotFound() {\n  return (\n    <div role=\"alert\">\n      <h1 style={{ textAlign: 'center' }}>Page not found 404</h1>\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { NavLink, useRouteMatch, useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport moviesAPI from '../services/api';\nimport MoviePendingView from '../MoviePendingView/MoviePendingView';\nimport NotFound from '../NotFound404/NotFound';\nimport s from '../MoviesPage/MoviesPage.module.css';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  REJECTED: 'rejected',\n  RESOLVED: 'resolved',\n};\n\nexport default function MoviesPage() {\n  const [movies, setMovies] = useState(null);\n  const [query, setQuery] = useState('');\n  const [request, setRequest] = useState('');\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(Status.IDLE);\n  const { url } = useRouteMatch();\n  const location = useLocation();\n\n  const handleRequestChange = ev => {\n    setQuery(ev.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = ev => {\n    ev.preventDefault();\n\n    if (query.trim() === '') {\n      toast('What would you like to find?');\n      return;\n    }\n    setRequest(query);\n  };\n\n  useEffect(() => {\n    setStatus(Status.PENDING);\n    const renderMovies = () => {\n      moviesAPI\n        .fetchMovies(request)\n        .then(setMovies)\n        .then(setStatus(Status.RESOLVED))\n        .catch(err => {\n          setError(err);\n          setStatus(Status.REJECTED);\n        });\n    };\n    renderMovies();\n  }, [request]);\n\n  return (\n    <>\n      {status === Status.PENDING && <MoviePendingView />}\n\n      {status === Status.REJECTED && <NotFound message={error} />}\n\n      {status === Status.RESOLVED && (\n        <>\n          <form className={s.form} onSubmit={handleSubmit}>\n            <input\n              className={s.input}\n              value={query}\n              onChange={handleRequestChange}\n              type=\"text\"\n              autoComplete=\"off\"\n              autoFocus\n              placeholder=\"Search movie\"\n            />\n            <button className={s.button} type=\"submit\">\n              <span>Search</span>\n            </button>\n          </form>\n\n          {movies && (\n            <ul className={s.moviesList}>\n              {movies.map(({ title, id }) => (\n                <NavLink\n                  key={id}\n                  className={s.moviesLink}\n                  to={{\n                    pathname: `${url}/${id}`,\n                    state: {\n                      from: location.pathname,\n                    },\n                  }}\n                >\n                  <li key={id} className={s.moviesItem}>\n                    {title}\n                  </li>\n                </NavLink>\n              ))}\n            </ul>\n          )}\n        </>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'c828b854ef40a7dc6bde47f13c682e4b';\n\n// const HOMEPAGE_URL = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`;\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n};\n\nconst fetchTrendingMovieForHomepage = async () => {\n  try {\n    const config = {\n      url: `trending/movie/day`,\n    };\n\n    const { data } = await axios(config);\n    return data.results;\n  } catch (error) {\n    new Error('Not found');\n  }\n};\n\nconst fetchMovies = async query => {\n  if (!query) {\n    return;\n  }\n  try {\n    const config = {\n      url: `search/movie`,\n      params: {\n        query,\n      },\n    };\n    const { data } = await axios(config);\n    return data.results;\n  } catch (error) {\n    new Error('Not found');\n  }\n};\n\nconst fetchMovieDetails = async movie_id => {\n  try {\n    const config = {\n      url: `movie/${movie_id}`,\n    };\n\n    const { data } = await axios(config, movie_id);\n    return data;\n  } catch (error) {\n    new Error('Not found');\n  }\n};\n\nconst fetchMovieCast = async movie_id => {\n  try {\n    const config = {\n      url: `movie/${movie_id}/credits`,\n    };\n    const { data } = await axios(config, movie_id);\n    return data.cast;\n  } catch (error) {\n    new Error('Not found');\n  }\n};\n\nconst fetchReviewsMovie = async movie_id => {\n  try {\n    const config = {\n      url: `movie/${movie_id}/reviews`,\n    };\n    const { data } = await axios(config, movie_id);\n    return data.results;\n  } catch (error) {\n    new Error('Not found');\n  }\n};\n\nconst api = {\n  fetchTrendingMovieForHomepage,\n  fetchMovies,\n  fetchMovieDetails,\n  fetchMovieCast,\n  fetchReviewsMovie,\n};\n\nexport default api;\n","import React, { Component } from 'react';\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nexport default class MoviePendingView extends Component {\n  render() {\n    return <Loader type=\"Grid\" color=\"#e50914\" height={60} width={60} />;\n  }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"MoviesPage_form__3pf7M\",\"input\":\"MoviesPage_input__12rWB\",\"button\":\"MoviesPage_button__1Cz_K\",\"moviesItem\":\"MoviesPage_moviesItem__AMCul\",\"moviesLink\":\"MoviesPage_moviesLink__2kEsU\"};"],"sourceRoot":""}